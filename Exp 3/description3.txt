# Admin Dashboard Project - Experiment 3

A admin dashboard interface built using HTML5 and CSS Grid Layout, featuring light/dark theme switching without JavaScript. This experiment demonstrates  CSS Grid techniques, the use of CSS custom properties for dynamic theming, and a pure CSS toggle mechanism.


-----------------------------------------------------------------------------------------------------------
Step of  HTML structure:

1.Header section

    <header> holds the dashboard title and the toggle label.

2.Navigation sidebar

    <nav> contains an unordered list <ul> with navigation links <li><a></a></li>.

3.Main content area

    <main> shows a welcome message and a placeholder for charts/reports.

4.Footer

    <footer> for copyright info.
5.Checkbox input for theme toggle
    <input type="checkbox" id="switchMode" />
Hidden by CSS, it controls the dark mode toggle.
Label is connected to checkbox via for="switchMode" so clicking the label toggles the checkbox.

1.Main container with CSS Grid

    <div class="dashboard"> wraps the entire dashboard content.
-----------------------------------------------------------------------------------------------------------
### HTML Elements
- `<input type="checkbox">` - Hidden theme toggle trigger
- `<div class="dashboard">` - Main grid container
- `<header>` - Top navigation bar with title and theme toggle
- `<nav>` - Left sidebar with navigation menu
- `<main>` - Primary content display area
- `<footer>` - Bottom information bar
- `<ul>` and `<li>` - Navigation menu structure
- `<label>` - Theme toggle interface element
Steps of CSS:
1.Main Layout Container-----------------------------------------------------------------------------------
    .dashboard {
    display: grid;
    grid-template-columns: 200px auto;
    grid-template-rows: 100px auto 40px;
    height: 100vh;
}
The .dashboard uses CSS Grid to create a layout with two columns and three rows. The first column is 200px wide for the sidebar, and the second fills the rest of the space. The rows are 100px for the header, flexible height for the main content, and 40px for the footer. The whole layout fills the full height of the browser window
2.Header--------------------------------------------------------------------------------------------------
    header{
    border: 1px solid #ffffff;
    background-color: var(--bg-header);
    color: var(--text-color);
    grid-column: 1/span 2;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 20px;
}
1.border: 1px solid #ffffff;
Adds a thin white border around the header.

2.background-color: var(--bg-header);
Sets the header’s background color using a CSS variable (for easy theme changes).

3.color: var(--text-color);
Sets the text color using a CSS variable to match the theme.

4.grid-column: 1 / span 2;
Makes the header span across both columns of the grid layout.

5.display: flex;
Enables Flexbox layout inside the header for flexible content alignment.

6.justify-content: space-between;
Distributes space evenly between child elements, pushing them to opposite edges horizontally.

7.align-items: center;
Vertically centers the content within the header.

8.padding: 0 20px;
Adds 20 pixels of horizontal padding inside the header for spacing on left and right sides.
3.Navbar ----------------------------------------------------------------------------------------------
    nav {
    border: 1px solid #ffffff;
    background-color: var(--bg-nav);
    color: var(--text-color);
}
1.border: 1px solid #ffffff;
Adds a thin white border around the navigation area.

2.background-color: var(--bg-nav);
Sets the navigation background color using a CSS variable for theming.

3.color: var(--text-color);
Sets the text color inside the navigation based on the current theme variable.
4. Main contain------------------------------------------------------------------------------------------
main {
    border: 1px solid #ffffff;
    background-color: var(--bg-main);
    color: var(--text-color);
}
1.border: 1px solid #ffffff;
Adds a thin white border around the main content area.

2.background-color: var(--bg-main);
Sets the main content background color from the CSS variable for theming.

3.color: var(--text-color);
Sets the text color based on the current theme variable.
5.Footer--------------------------------------------------------------------------------------------------
    footer {
    border: 1px solid #ffffff;
    background-color: var(--bg-footer);
    color: var(--text-color);
    grid-column: 1/span 2;
    text-align: center;
}
1.border: 1px solid #ffffff;
Adds a thin white border around the footer area.

2.background-color: var(--bg-footer);
Uses the footer background color from the CSS variable (for theming).

3.color: var(--text-color);
Sets the text color based on the current theme variable.

4.grid-column: 1 / span 2;
Makes the footer span across both columns of the grid.

5.text-align: center;
Centers the footer text horizontally.

6. Responsive Design(Body tag)------------------------------------------------------------------------------

body {
    margin: 0;
    padding: 0;
}
1.margin: 0;
Removes the default margin from the body to eliminate unwanted spacing around the page.

2.padding: 0;
Removes any default padding inside the body element.

7.Set initial background colors uning variable----------------------------------------------------------------
    Defines color variables used throughout the site:
:root {
    --bg-header: #02c902;
    --bg-nav: #e5e9e6;
    --bg-main: #f0f0f0;
    --bg-footer: #02c902;
    --text-color: #000000;
}

1.--bg-header: #02c902; — Light green header background.

2.--bg-nav: #e5e9e6; — Light gray navigation background.

3.--bg-main: #f0f0f0; — Very light gray main content background.

4.--bg-footer: #02c902; — Light green footer background.

5.--text-color: #000000; — Black text color.

8.When the checkbox is checked, overrides the CSS variables with dark mode colors:--------------------------------
#switchMode:checked ~ .dashboard  {
    --bg-header: #117218;
    --bg-nav: #1a1a1a;
    --bg-main: #2a2a2a;
    --bg-footer: ##117218;
    --text-color: #ffffff;
}

1.--bg-header: #117218; — Dark green header background.

2.--bg-nav: #1a1a1a; — Very dark gray navigation background.

3.--bg-main: #2a2a2a; — Dark gray main content background.

4.--bg-footer: ##117218; — (Typo: remove extra #, should be #117218) dark green footer background.

5.--text-color: #ffffff; — White text color for dark mode.

9. Mode change ------------------------------------------------------------------------------------------------------
#switchMode {
    display: none;
}
display: none;
Hides the checkbox input element, since it’s only used to toggle theme state behind the scenes.
----------------------------------------------------------------------------------------------------------------------
### CSS Technologies
- **CSS Grid Layout** - Primary layout system
- **CSS Custom Properties (Variables)** - Dynamic theming
- **Flexbox** - Internal header layout
- **CSS Selectors** - Element targeting and theme switching
- **Pseudo-selectors** - `:checked` state for theme toggle

--------------------------------------------------------------------------------------------------------------------------
Leaning Outcomes:----------------------------
1.learn how to build a dashboard layout using basic HTML tags.
2.How CSS Grid helps make neat, organized page layouts.
3.How to use CSS variables to easily change colors for light and dark themes.Switch between light and dark mode using only CSS, no JavaScript
4.How to use Flexbox to arrange items nicely in the header.
5.learn how to use CSS selectors and special states (like :checked) to change styles.
